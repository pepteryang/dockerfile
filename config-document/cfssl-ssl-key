#!/bin/bash
###############################################################
#Kubernentes中的身份验证
#kubernetes 系统的各组件需要使用 TLS 证书对通信进行加密，
#本文档使用 CloudFlare 的 PKI 工具集 cfssl 来生成 Certificate Authority (CA) 和其它证书；
#生成的 CA 证书和秘钥文件如下：
#    ca-key.pem
#    ca.pem
#    kubernetes-key.pem
#    kubernetes.pem
#    kube-proxy.pem
#    kube-proxy-key.pem
#    admin.pem
#    admin-key.pem
#
#使用证书的组件如下：
#    etcd：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；
#    kube-apiserver：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；
#    kubelet：使用 ca.pem；
#    kube-proxy：使用 ca.pem、kube-proxy-key.pem、kube-proxy.pem；
#    kubectl：使用 ca.pem、admin-key.pem、admin.pem；
#
#kube-controller、kube-scheduler 当前需要和 kube-apiserver 部署在同一台机器上且使用非安全端口通信，故不需要证书。
###############################################

###############配置kubernetes服务启动配置文件：
CFSSL_HOME_PATH="/opt/cfssl"
CFSSL_LINUX_VERSION="R1.2"
CFSSL_SSL_FILES_DIR="/opt/cfssl/ssl"
K8S_ALL_IP='''"10.83.36.59",
      "10.83.36.60",
      "10.83.36.61",
      "10.83.36.63",
      "10.83.36.66",
      "10.83.36.67",
      "10.254.0.1",'''
mkdir -pv ${CFSSL_HOME_PATH}/bin
mkdir -pv ${CFSSL_SSL_FILES_DIR}


#######################
#下载CFSSL的二进制文件
########################
rm -rf /usr/local/bin/cfssl
rm -rf /usr/local/bin/cfssl-certinfo
rm -rf /usr/local/bin/cfssljson

#curl -L https://pkg.cfssl.org/${CFSSL_LINUX_VERSION}/cfssl_linux-amd64 -o ${CFSSL_HOME_PATH}/bin/cfssl
#curl -L https://pkg.cfssl.org/${CFSSL_LINUX_VERSION}/cfssljson_linux-amd64 -o ${CFSSL_HOME_PATH}/bin/cfssljson
#curl -L https://pkg.cfssl.org/${CFSSL_LINUX_VERSION}/cfssl-certinfo_linux-amd64 -o ${CFSSL_HOME_PATH}/bin/cfssl-certinfo


chmod +x ${CFSSL_HOME_PATH}/bin/cfssl ${CFSSL_HOME_PATH}/bin/cfssljson ${CFSSL_HOME_PATH}/bin/cfssl-certinfo

###################
#设置可执行文件链接
###################
ln -s ${CFSSL_HOME_PATH}/bin/cfssl /usr/local/bin/cfssl
ln -s ${CFSSL_HOME_PATH}/bin/cfssl-certinfo /usr/local/bin/cfssl-certinfo
ln -s ${CFSSL_HOME_PATH}/bin/cfssljson /usr/local/bin/cfssljson

cfssl print-defaults config > ${CFSSL_SSL_FILES_DIR}/ca-config.json
cfssl print-defaults csr > ${CFSSL_SSL_FILES_DIR}/ca-csr.json


cat > ${CFSSL_SSL_FILES_DIR}/k8s-root-ca-config.json << EOF
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
        ],
        "expiry": "8760h"
      }
    }
  }
}
EOF

###########################
#字段说明
#
#    ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；
#    signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；
#    server auth：表示client可以用该CA对server提供的证书进行验证；
#    client auth：表示server可以用该CA对client提供的证书进行验证；
############################

cat > ${CFSSL_SSL_FILES_DIR}/k8s-root-ca-csr.json << EOF
{
    "CN": "kubernetes",
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "C": "CN",
            "L": "shenzhen",
            "O": "k8s",
            "OU": "System",
            "ST": "shenzhen"
        }
    ]
}
EOF
#############################
#字段说明
#    “CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；
#    “O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；
#############################
#创建 kubernetes 证书签名请求
#############################

cat > ${CFSSL_SSL_FILES_DIR}/kubernetes-csr.json << EOF
{
    "CN": "kubernetes",
    "hosts": [
      "127.0.0.1",
      ${K8S_ALL_IP}
      "kubernetes",
      "kubernetes.default",
      "kubernetes.default.svc",
      "kubernetes.default.svc.cluster",
      "kubernetes.default.svc.cluster.local"
    ],
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "C": "CN",
            "ST": "shenzhen",
            "L": "shenzhen",
            "O": "k8s",
            "OU": "System"
        }
    ]
}
EOF
#################################################################
#
#如果 hosts 字段不为空则需要指定授权使用该证书的 IP #或域名列表，由于该证书后续被 etcd 集群和 kubernetes master #集群使用，所以上面分别指定了 etcd 集群、kubernetes master 集群的主机 IP #和 kubernetes 服务的服务 IP（一般是 kue-apiserver 指定的 #service-cluster-ip-range 网段的第一个IP，如 10.254.0.1。
#
#################################################################

###########################
#生成 kubernetes 证书和私钥
###########################

########################
#创建 admin 证书签名请求
#后续 kube-apiserver 使用 RBAC 对客户端(如 #kubelet、kube-proxy、Pod)请求进行授权；
#kube-apiserver 预定义了一些 RBAC 使用的 RoleBindings，如 cluster-admin 
#将 Groupsystem:masters 与 Role cluster-admin 绑定，该 Role 授予了调用kube-apiserver 的所有 API的权限；
#OU 指定该证书的 Group 为 system:masters，kubelet 使用该证书访问 kube-apiserver时 ，
#由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的system:masters，
#所以被授予访问所有 API 的权限；
#########################
cat > ${CFSSL_SSL_FILES_DIR}/admin-csr.json << EOF
{
  "CN": "admin",
  "hosts": [],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "ST": "shenzhen",
      "L": "shenzhen",
      "O": "system:masters",
      "OU": "System"
    }
  ]
}
EOF

###############################
#创建 kube-proxy 证书签名请求
###############################
#CN 指定该证书的 User 为 system:kube-proxy；
#kube-apiserver 预定义的 RoleBinding cluster-admin 将User system:kube-proxy 与 Rolesystem:node-proxier 绑定
#该Role 授予了调用 kube-apiserver Proxy 相关 API 的权限；
################################
cat > ${CFSSL_SSL_FILES_DIR}/kube-proxy-csr.json << EOF
{
  "CN": "system:kube-proxy",
  "hosts": [],
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "ST": "shenzhen",
      "L": "shenzhen",
      "O": "k8s",
      "OU": "System"
    }
  ]
}
EOF

#k8s-gencert.json
cat >${CFSSL_SSL_FILES_DIR}/k8s-gencert.json  << EOF
{
  "signing": {
    "default": {
      "expiry": "87600h"
    },
    "profiles": {
      "kubernetes": {
        "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
        ],
        "expiry": "87600h"
      }
    }
  }
}
EOF

#############################
#生成证书和私钥
#############################

cd ${CFSSL_SSL_FILES_DIR}
cfssl gencert -initca k8s-root-ca-csr.json | cfssljson -bare k8s-root-ca
cfssl gencert -ca=k8s-root-ca.pem -ca-key=k8s-root-ca-key.pem -config=k8s-root-ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
cfssl gencert -ca=k8s-root-ca.pem -ca-key=k8s-root-ca-key.pem -config=k8s-root-ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
cfssl gencert -ca=k8s-root-ca.pem -ca-key=k8s-root-ca-key.pem -config=k8s-root-ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
cfssl gencert -ca=k8s-root-ca.pem -ca-key=k8s-root-ca-key.pem -config=k8s-root-ca-config.json -profile=kubernetes k8s-gencert.json | cfssljson -bare k8s-gencert


#######################
#使用 Cfssl-Certinfo 检测信息
#######################
#确认 Issuer 字段的内容和 ca-csr.json 一致；
#确认 Subject 字段的内容和 kubernetes-csr.json 一致；
#确认 X509v3 Subject Alternative Name 字段的内容和 kubernetes-csr.json 一致；
#确认 X509v3 Key Usage、Extended Key Usage 字段的内容和 ca-config.json 中 kubernetesprofile 一致；
######################
openssl x509  -noout -text -in  kubernetes.pem
#
#cfssl-certinfo -cert kubernetes.pem

#生成BOOTSTRAP_TOKEN 变量

export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d ' ')
cat > ${CFSSL_SSL_FILES_DIR}/token.csv <<EOF
${BOOTSTRAP_TOKEN},kubelet-bootstrap,10001,"system:kubelet-bootstrap"
EOF
