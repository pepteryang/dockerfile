#*******************************************************#
#  如下命令在Master端执行  设置kubelet的认证参数          #
#*******************************************************#

######################################################################
#安装和配置 kubelet用户的一些认证参数
#kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将
#bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper
#角色，然后 kubelet 才有权限创建认证请求(certificatesigningrequests)：
######################################################################

export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d ' ')
echo "Tokne: ${BOOTSTRAP_TOKEN}"
cat > token.csv <<EOF
${BOOTSTRAP_TOKEN},kubelet-bootstrap,10001,"system:kubelet-bootstrap"
EOF

####################################################
kubectl create clusterrolebinding kubelet-bootstrap \
	--clusterrole=system:node-bootstrapper \
	--user=kubelet-bootstrap

########################################################################
#--user=kubelet-bootstrap 是文件 /etc/kubernetes/token.csv 中指定的用户名，
#同时也写入了文件/etc/kubernetes/bootstrap.kubeconfig
#########################################################################

export MASTER_IP=127.0.0.1
export KUBE_APISERVER="https://127.0.0.1:6443"
# 设置集群参数
kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER} \
  --kubeconfig=bootstrap.kubeconfig
 # 设置客户端认证参数
kubectl config set-credentials kubelet-bootstrap \
  --token=${BOOTSTRAP_TOKEN} \
  --kubeconfig=bootstrap.kubeconfig

 # 设置上下文参数
 kubectl config set-context default \
  --cluster=kubernetes \
  --user=kubelet-bootstrap \
  --kubeconfig=bootstrap.kubeconfig
 # 设置默认上下文
kubectl config use-context default --kubeconfig=bootstrap.kubeconfig

####################################################################
#--embed-certs 为 true 时表示将 certificate-authority 证书写入到生成的 bootstrap.kubeconfig 文件中；
#设置 kubelet 客户端认证参数时没有指定秘钥和证书，后续由 kubeapiserver 自动生成；
####################################################################

#########################################
#生成kube-proxy的链接配置：kube-proxy.kubeconfig
#########################################
# 设置集群参数
export MASTER_IP=10.2.35.25
export KUBE_APISERVER="https://${MASTER_IP}:6443"
kubectl config set-cluster kubernetes \
--certificate-authority=/etc/kubernetes/ssl/ca.pem \
--embed-certs=true \
--server=${KUBE_APISERVER} \
--kubeconfig=kube-proxy.kubeconfig
# 设置客户端认证参数
kubectl config set-credentials kube-proxy \
--client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \
--client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \
--embed-certs=true \
--kubeconfig=kube-proxy.kubeconfig
# 设置上下文参数
kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
# 设置默认上下文
kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig


####################################################################
#在客户端执行
kubectl get csr
kubectl certificate approve